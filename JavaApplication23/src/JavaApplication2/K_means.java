/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JavaApplication2;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import static javafx.scene.paint.Color.color;
import static javafx.scene.paint.Color.color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 *
 * @author carol
 */
public class K_means extends javax.swing.JFrame {

    //cordenadas puntos
    ArrayList<Integer> corPunX = new ArrayList<>();
    ArrayList<Integer> corPunY = new ArrayList<>();
    //cordenadas atractores
    ArrayList<Integer> corAtratX = new ArrayList<>();
    ArrayList<Integer> corAtratY = new ArrayList<>();
    //guardo distancias
    ArrayList<Float> distancias = new ArrayList<>();
    //color de lso atractores
    ArrayList<Color> colorAtractor = new ArrayList<>();
    //sumara los puntos de la misma clase
    ArrayList<Integer> clasesX = new ArrayList<>();
    ArrayList<Integer> clasesY = new ArrayList<>();
    
    ArrayList<Color> clasesColos = new ArrayList<>();
    //numero de atratores y puntos
    int atractores,contaCentor=1;
    int Np;
    
    
    //private Object jTextField1;
   // private Object JTextField2;
    

    /**
     * Creates new form K_means
     */
    public K_means() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btngenerar = new javax.swing.JButton();
        btnClases = new javax.swing.JButton();
        btnlimpiar = new javax.swing.JButton();
        txtCantPuntos = new javax.swing.JTextField();
        txtAtractores = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        button2 = new java.awt.Button();
        btnCalCentroide = new javax.swing.JButton();
        JPpuntos = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btngenerar.setText("Aplicar Puntos");
        btngenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btngenerarActionPerformed(evt);
            }
        });
        jPanel1.add(btngenerar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        btnClases.setText("Clasificar");
        btnClases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClasesActionPerformed(evt);
            }
        });
        jPanel1.add(btnClases, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 105, -1));

        btnlimpiar.setText("Limpiar");
        btnlimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnlimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, -1, -1));
        jPanel1.add(txtCantPuntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 90, -1));
        jPanel1.add(txtAtractores, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 90, -1));

        jLabel1.setText("Puntos");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jLabel2.setText("atractores");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        button2.setLabel("Salir");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        jPanel1.add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 480, -1, -1));

        btnCalCentroide.setText("calcular centroides");
        btnCalCentroide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalCentroideActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalCentroide, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 530));

        JPpuntos.setBackground(new java.awt.Color(255, 255, 255));
        JPpuntos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                JPpuntosMousePressed(evt);
            }
        });

        javax.swing.GroupLayout JPpuntosLayout = new javax.swing.GroupLayout(JPpuntos);
        JPpuntos.setLayout(JPpuntosLayout);
        JPpuntosLayout.setHorizontalGroup(
            JPpuntosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 880, Short.MAX_VALUE)
        );
        JPpuntosLayout.setVerticalGroup(
            JPpuntosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
        );

        getContentPane().add(JPpuntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 880, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
         System.exit(0);
    }//GEN-LAST:event_button2ActionPerformed

    private void btnlimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlimpiarActionPerformed
        // TODO add your handling code here:
      
        txtCantPuntos.setText("");
        txtAtractores.setText("");
        corAtratX.clear();
        corAtratY.clear();
        Np = 0;
        atractores = 0;
        contaCentor=1;
        colorAtractor.clear();
        clasesColos.clear();
        //colorPuntos.clear();
        repaint();
    }//GEN-LAST:event_btnlimpiarActionPerformed

    private void btngenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btngenerarActionPerformed
        // TODO add your handling code here:
        Np = Integer.parseInt(txtCantPuntos.getText());
        atractores = Integer.parseInt(txtAtractores.getText());
        puntosCor(Np);                       
        pintarPuntos();
    }//GEN-LAST:event_btngenerarActionPerformed

    private void JPpuntosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPpuntosMousePressed
        // TODO add your handling code here:
        
        System.out.println("atractores "+atractores);
        if(atractores >= contaCentor){
            Graphics g = JPpuntos.getGraphics();
            switch(contaCentor){
                case 1:                        
                        g.setColor(Color.MAGENTA);//establecemos el color
                        
                        break;
                    case 2:
                        g.setColor(Color.BLUE);//establecemos el color
                        break;
                    case 3:
                        g.setColor(Color.YELLOW);//establecemos el color
                        break;
                    case 4:
                        g.setColor(Color.GREEN);//establecemos el color
                        break;
                    case 5:
                        g.setColor(Color.RED);//establecemos el color
                        break;
                    case 6:
                        g.setColor(Color.GRAY);//establecemos el color
                        break;
                    case 7:
                        g.setColor(Color.PINK);//establecemos el color
                        break;
                    case 8:
                        g.setColor(Color.CYAN);//establecemos el color
                        break;
            }
            corAtratX.add(evt.getX());
            corAtratY.add(evt.getY());
            colorAtractor.add(g.getColor());
            g.fillOval(evt.getX(), evt.getY(), 10, 10);
            contaCentor++;
        }
        
       // System.out.println("colores= "+colorAtractor);
    }//GEN-LAST:event_JPpuntosMousePressed

    private void btnClasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClasesActionPerformed
        // TODO add your handling code here:
        
        float minimo = 0;
        int indexMin = 0;
        Color caux;
        
        System.out.println("cordenadas centros "+corAtratX+" "+corAtratY);
        Graphics g = JPpuntos.getGraphics();
        for (int i = 0; i < Np; i++) {
            
            for (int j = 0; j < atractores; j++) {
                distancias.add(calcularDis(corPunX.get(i), corPunY.get(i), corAtratX.get(j), corAtratY.get(j)));
              //  System.out.println("distancias "+i+" ; "+distancias);
                
            }
            minimo = Collections.min(distancias);
            //System.out.println("valor minimo "+minimo);
            indexMin = distancias.indexOf(minimo);
            //System.out.println("indice valor "+indexMin);
            caux = colorAtractor.get(indexMin);
           // System.out.println("color del atractor "+caux);
            
            //colorPuntos.add(caux);
            clasesColos.add(caux);
            g.setColor(caux);
            g.fillOval(corPunX.get(i), corPunY.get(i), 5, 5);
          
            
            
            distancias.clear();
        }
        
        /*
        for (int i = 0; i < atractores; i++) {
            g.setColor(colorAtractor.get(i));
            g.fillOval(corAtratX.get(i), corAtratY.get(i), 15, 15);
        }*/
    }//GEN-LAST:event_btnClasesActionPerformed

    private void btnCalCentroideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalCentroideActionPerformed
        // TODO add your handling code here:
        System.out.println("cordenadas antes "+corAtratX+"."+corAtratY);
        ArrayList<Integer> AtratX = new ArrayList<>();
        ArrayList<Integer> AtratY = new ArrayList<>();
        int cont=0;
        int Contadores[] = new int[atractores];       
        Graphics g = JPpuntos.getGraphics();
        System.out.println("colores " +clasesColos.size());
        
        for (int i = 0; i < atractores; i++) {
            Contadores[i]=0;
            AtratX.add(0);
            AtratY.add(0);
        }
        
        for (int i = 0; i < Np; i++) {
            for (int j = 0; j < atractores; j++) {
                if(clasesColos.get(i) == colorAtractor.get(j)){
                    cont = AtratX.get(j) + corPunX.get(i);
                    AtratX.set(j, cont);
                    cont = 0;
                    cont = AtratY.get(j) + corPunY.get(i);
                    AtratY.set(j, cont);
                    
                    Contadores[j] =  Contadores[j] +1;
                   
                }              
            }                       
            
        }    
        
        

        for (int k = 0; k < atractores; k++) {
           AtratX.set(k,AtratX.get(k) / Contadores[k]);
           AtratY.set(k,AtratY.get(k) / Contadores[k]);
           //g.setColor(colorAtractor.get(k));
           g.setColor(Color.black);
           g.fillOval(AtratX.get(k), AtratY.get(k), 15, 15);
           
        }
        
        for (int k = 0; k < atractores; k++) {
           corAtratX.set(k, AtratX.get(k));
           corAtratY.set(k, AtratY.get(k));
           
        }
        clasesColos.clear();
        
        System.out.println("cordenadas despues "+corAtratX+"."+corAtratY);
        
        
    }//GEN-LAST:event_btnCalCentroideActionPerformed
  
    public float calcularDis( float x1, float y1, float x2, float y2){
        
        float d = 0;
       
        return d=(float) Math.sqrt( Math.pow(x2-x1, 2)+ Math.pow(y2-y1, 2) );         
      
    }
    public void pintarPuntos(){
       Graphics g = JPpuntos.getGraphics();
       g.setColor(Color.black);
        for (int i = 0; i < Np; i++) {
            g.fillOval(corPunX.get(i), corPunY.get(i), 5, 5);
        }
    }
    
    public void puntosCor(int cant){
        Random r = new Random();
       
        for(int i=0; i < cant; i++){
            corPunX.add(r.nextInt(870)+5);
            corPunY.add(r.nextInt(540)+5); 
        }
        
    }

     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(K_means.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(K_means.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(K_means.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(K_means.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new K_means().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPpuntos;
    private javax.swing.JButton btnCalCentroide;
    private javax.swing.JButton btnClases;
    private javax.swing.JButton btngenerar;
    private javax.swing.JButton btnlimpiar;
    private java.awt.Button button2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtAtractores;
    private javax.swing.JTextField txtCantPuntos;
    // End of variables declaration//GEN-END:variables
}
